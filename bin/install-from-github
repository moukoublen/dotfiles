#!/usr/bin/env bash

set -u -o pipefail
#set -e -u -o pipefail

__log_start() {
  local fmt="$1"
  shift
  printf "${fmt}\n" "${@}"
}

__log() {
  local fmt="$1"
  shift
  printf "  ${fmt}\n" "${@}"
}

__log_end() {
  local fmt="$1"
  shift
  printf "  ${fmt}\n\n" "${@}"
}


__exit_on_fail() {
  if [ $? -ne 0 ]; then
    __log_end "\e[1;31msomething went wrong \e[0m"
    exit 1
  fi
}

__get_remote_filename() {
  local f
  # split string of argument $1 by / and get last part
  f=${1##*/}

  if [ -n "${f}" ]; then
    echo "${f}"
    return
  fi

  # try to parse filename from content-disposition header
  f=$(curl --head --silent --fail --location "${1}" | grep 'content-disposition' | grep 'filename=' | tail -n 1 | sed -r 's/^.*filename=(.*)$/\1/')
  if [[ -n "${f}" ]]; then
    echo "${f}"
    return
  fi

  # if none found, return random string
  cat /dev/urandom | tr --delete --complement 'a-zA-Z0-9' | fold --width=16 | head --lines=1
}

NAME=""
REPO=""
FN_REMOTE_VER=""
FN_LOCAL_VER=""
FN_GET_DL_LINK=""
DL_FILE=""
FN_INSTALL=""
BIN_DIR="/usr/local/bin"

CURL_VERBOSE=()

UNKNOWN_ARGS=()
while (($#)); do
  case "${1}" in
    -n|--name)
      NAME="${2}"
      shift 2
      ;;
    -r|--repo)
      REPO="${2}"
      shift 2
      ;;
    -rv|--fn-remote-version)
      FN_REMOTE_VER="${2}"
      shift 2
      ;;
    -lv|--fn-local-version)
      FN_LOCAL_VER="${2}"
      shift 2
      ;;
    -dl|--fn-get-download-link)
      FN_GET_DL_LINK="${2}"
      shift 2
      ;;
    -f|--download-to-file)
      DL_FILE="${2}"
      shift 2
      ;;
    -i|--fn-install)
      FN_INSTALL="${2}"
      shift 2
      ;;
    -d|--destination)
      BIN_DIR="${2}"
      shift 2
      ;;
    -v|--verbose)
      CURL_VERBOSE=('--show-error' '--verbose')
      set -x
      shift 1
      ;;
    *)
      UNKNOWN_ARGS+=("${1}")
      shift
      ;;
  esac
done

## TODO: validation

TMP_DIR="/tmp/dln"
case "$(uname)" in
  "Darwin")
    TMP_DIR=$(mktemp -d -t "${NAME}")
    ;;
  "Linux")
    TMP_DIR=$(mktemp --directory --tmpdir "${NAME}_XXXXXXX")
    ;;
esac

GH_API_LATEST_RELEASE="https://api.github.com/repos/${REPO}/releases/latest"

__log_start "\e[1;34m%s\e[0m\n  \e[0;90m(${GH_API_LATEST_RELEASE})\e[0m" "${REPO}"

JS_BODY=$(curl "${CURL_VERBOSE[@]}" --silent --fail --location "${GH_API_LATEST_RELEASE}")

REMOTE_VER=$($FN_REMOTE_VER "${JS_BODY}" || echo -n "")
LOCAL_VER=$($FN_LOCAL_VER "${BIN_DIR}" || echo -n "")

if [[ "${REMOTE_VER}" == "${LOCAL_VER}" ]]; then
  __log_end "it is already \e[1;32mupdated\e[0m to \e[1;34m%s\e[0m" "${LOCAL_VER}"
  exit 0
fi

__log "updating \e[1;34m%s\e[0m from \e[1;34m%s\e[0m to \e[1;34m%s\e[0m" "${NAME}" "${LOCAL_VER}" "${REMOTE_VER}"

DL_URL=$($FN_GET_DL_LINK "${JS_BODY}")
if [[ "${DL_FILE}" == "" ]]; then
  DL_FILE=$(__get_remote_filename "${DL_URL}")
  __exit_on_fail
fi
__log  "downloading from \e[1;34m%s\e[0m at \e[1;34m%s/%s\e[0m" "${DL_URL}" "${TMP_DIR}" "${DL_FILE}"
curl "${CURL_VERBOSE[@]}" \
  --silent \
  --fail \
  --location \
  "${DL_URL}" \
  -o "${TMP_DIR}/${DL_FILE}"
__exit_on_fail

__log "installing \e[1;34m%s\e[0m in \e[1;34m%s\e[0m" "${NAME}" "${BIN_DIR}"
"${FN_INSTALL}" "${BIN_DIR}" "${TMP_DIR}/${DL_FILE}"
__exit_on_fail

rm -rf "${TMP_DIR}"
__log_end "\e[1;32mdone\e[0m"
