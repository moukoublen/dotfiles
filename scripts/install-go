#!/usr/bin/env bash

# $1: version e.g. 1.17.11

get_remote_latest_version() {
  local remote_version
  remote_version="$(curl --silent --fail --location "https://go.dev/VERSION?m=text")"
  echo "${remote_version}" | head -n 1 | sed 's/^go//g'
}

get_local_version() {
  [[ -d /usr/local/go ]] && /usr/local/go/bin/go version | sed 's/^go version go//g' | sed 's/ .*$//g'
}

VER="${1}"

if [[ "${VER}" == "" ]]; then
  VER="$(get_remote_latest_version)"
fi

if [[ -z "${VER}" ]]; then
  echo "Error: No go version specified"
  exit 1
fi

if [[ "${VER}" == "$(get_local_version)" ]]; then
  echo "Version ${VER} is already installed"
  exit 0
fi

if command -v go &> /dev/null && [[ ! -d /usr/local/go ]]; then
  echo -e "\e[32mGo has been installed in a different way and not in path /usr/local/go.\e[0m Aborting..."
  exit 1
fi

DR=$(mktemp --directory --tmpdir golang_XXXXXXX)

OS="$(uname -s | tr '[:upper:]' '[:lower:]')"
ARCH="$(uname -m | tr '[:upper:]' '[:lower:]')"
case "${ARCH}" in
  "x86_64")
    ARCH="amd64"
    ;;
  "aarch64")
    ARCH="arm64"
    ;;
esac

## https://go.dev/dl/go1.22.5.linux-amd64.tar.gz
DL_URL="https://go.dev/dl/go${VER}.${OS}-${ARCH}.tar.gz"

echo -e "Downloading \e[34m${DL_URL}\e[0m in \e[34m${DR}\e[0m"
curl \
  --silent \
  --fail \
  --location \
  --show-error \
  "${DL_URL}" \
  -o "${DR}/go.tar.gz"

if [[ -d /usr/local/go ]]; then
  echo -e "\e[37mDelete previous go installation (\e[0m$(/usr/local/go/bin/go version)\e[37m)\e[0m"
  sudo rm -rf /usr/local/go
fi

echo -e "Installing go \e[34m${VER}\e[0m under /usr/local"
sudo tar -C /usr/local -xzf "${DR}/go.tar.gz"

sudo rm -rf "${DR}"
echo -e "\e[1;32mDone\e[0m"
